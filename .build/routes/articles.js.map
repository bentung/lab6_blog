{
  "version": 3,
  "sources": ["../../routes/articles.ts"],
  "sourcesContent": ["import Router, { RouterContext } from \"koa-router\";\nimport bodyParser from 'koa-bodyparser';\nimport * as model from \"../models/articles\";\nimport { basicAuth } from \"../controllers/auth\";\nimport { validateArticle } from \"../controllers/validation\";\n\n// const articles = [\n//   {\n//     title: 'Hello article',\n//     fullText: 'some text to fill the body',\n//     creationDate: new Date()\n//   },\n//   {\n//     title: 'Another article',\n//     fullText: 'again some text to fill the body',\n//     creationDate: new Date()\n//   },\n//   {\n//     title: 'Coventry article',\n//     fullText: 'some coventry details to fill the body',\n//     creationDate: new Date()\n//   },\n//   {\n//     title: 'smart campus',\n//     fullText: 'smart campus ...',\n//     creationDate: new Date()\n//   },\n// ]\n\nconst router = new Router({ prefix: '/api/v1/articles' });\n\nconst getAll = async (ctx: RouterContext, next: any) => {\n  // ctx.body = articles;\n  console.log(ctx);\n  console.log(next);\n  let articles = await model.getAll();\n  if (articles.length) {\n    ctx.body = articles;\n  } else {\n    ctx.body = {};\n  }\n  await next();\n}\n\nconst createArticle = async (ctx: RouterContext, next: any) => {\n  // let { title, fullText } = ctx.request.body;\n  // let newArticle = { title: title, fullText: fullText, creationDate: new Date() };\n  // articles.push(newArticle);\n  // ctx.status = 201;\n  // ctx.body = newArticle;\n\n  const body = ctx.request.body;\n  let result = await model.add(body);\n  if (result.status == 201) {\n    ctx.status = 201;\n    ctx.body = body;\n  } else {\n    ctx.status = 500;\n    ctx.body = { err: \"insert data failed\" };\n  }\n\n  await next();\n}\n\nconst getById = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id;\n  // if ((id < articles.length + 1) && (id > 0)) {\n  //   ctx.status = 200;\n  //   ctx.body = articles[id - 1];\n  // } else {\n  //   ctx.status = 404;\n  // }\n  let article = await model.getById(id);\n  if (article.length) {\n    ctx.body = article[0];\n  } else {\n    ctx.status = 400;\n  }\n  await next();\n}\n\nconst updateArticle = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id;\n  // let { title, fullText } = ctx.request.body;\n  // let updateArticle = { title: title ?? '', fullText: fullText ?? '', editedDate: new Date() };\n\n  // if (id < articles.length + 1 && id > 0) {\n  //   articles[id - 1] = {\n  //     ...articles[id - 1],\n  //     ...updateArticle\n  //   };\n  //   ctx.status = 200;\n  //   ctx.body = updateArticle;\n  // } else {\n  //   ctx.status = 404;\n  // }\n\n  const body = ctx.request.body;\n  let result = await model.update(body, id);\n  if (result.status == 201) {\n    ctx.status = 201;\n    ctx.body = body;\n  } else {\n    ctx.status = 500;\n    ctx.body = { err: \"update data failed\" };\n  }\n\n  await next();\n}\n\nconst deleteArticle = async (ctx: RouterContext, next: any) => {\n  let id = +ctx.params.id;\n\n  // if (id < articles.length + 1 && id > 0) {\n  //   articles.splice(id - 1, 1);\n  //   ctx.status = 200;\n  //   ctx.body = { message: \"deleted\" };\n  // } else {\n  //   ctx.status = 404;\n  // }\n  let result = await model.deleteArticle(id);\n  ctx.status = 201;\n  ctx.body = { msg: `${id} deleted` };\n\n  await next();\n}\n\nrouter.get('/', getAll);\nrouter.post('/', basicAuth, bodyParser(), validateArticle, createArticle);\nrouter.get('/:id([0-9]{1,})', getById);\nrouter.put('/:id([0-9]{1,})', basicAuth, bodyParser(), updateArticle);\nrouter.delete('/:id([0-9]{1,})', basicAuth, deleteArticle);\n\nexport { router };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAsC;AACtC,4BAAuB;AACvB,YAAuB;AACvB,kBAA0B;AAC1B,wBAAgC;AAyBhC,MAAM,SAAS,IAAI,kBAAAA,QAAO,EAAE,QAAQ,mBAAmB,CAAC;AAExD,MAAM,SAAS,OAAO,KAAoB,SAAc;AAEtD,UAAQ,IAAI,GAAG;AACf,UAAQ,IAAI,IAAI;AAChB,MAAI,WAAW,MAAM,MAAM,OAAO;AAClC,MAAI,SAAS,QAAQ;AACnB,QAAI,OAAO;AAAA,EACb,OAAO;AACL,QAAI,OAAO,CAAC;AAAA,EACd;AACA,QAAM,KAAK;AACb;AAEA,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAO7D,QAAM,OAAO,IAAI,QAAQ;AACzB,MAAI,SAAS,MAAM,MAAM,IAAI,IAAI;AACjC,MAAI,OAAO,UAAU,KAAK;AACxB,QAAI,SAAS;AACb,QAAI,OAAO;AAAA,EACb,OAAO;AACL,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,KAAK,qBAAqB;AAAA,EACzC;AAEA,QAAM,KAAK;AACb;AAEA,MAAM,UAAU,OAAO,KAAoB,SAAc;AACvD,MAAI,KAAK,CAAC,IAAI,OAAO;AAOrB,MAAI,UAAU,MAAM,MAAM,QAAQ,EAAE;AACpC,MAAI,QAAQ,QAAQ;AAClB,QAAI,OAAO,QAAQ;AAAA,EACrB,OAAO;AACL,QAAI,SAAS;AAAA,EACf;AACA,QAAM,KAAK;AACb;AAEA,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAC7D,MAAI,KAAK,CAAC,IAAI,OAAO;AAerB,QAAM,OAAO,IAAI,QAAQ;AACzB,MAAI,SAAS,MAAM,MAAM,OAAO,MAAM,EAAE;AACxC,MAAI,OAAO,UAAU,KAAK;AACxB,QAAI,SAAS;AACb,QAAI,OAAO;AAAA,EACb,OAAO;AACL,QAAI,SAAS;AACb,QAAI,OAAO,EAAE,KAAK,qBAAqB;AAAA,EACzC;AAEA,QAAM,KAAK;AACb;AAEA,MAAM,gBAAgB,OAAO,KAAoB,SAAc;AAC7D,MAAI,KAAK,CAAC,IAAI,OAAO;AASrB,MAAI,SAAS,MAAM,MAAM,cAAc,EAAE;AACzC,MAAI,SAAS;AACb,MAAI,OAAO,EAAE,KAAK,GAAG,aAAa;AAElC,QAAM,KAAK;AACb;AAEA,OAAO,IAAI,KAAK,MAAM;AACtB,OAAO,KAAK,KAAK,2BAAW,sBAAAC,SAAW,GAAG,mCAAiB,aAAa;AACxE,OAAO,IAAI,mBAAmB,OAAO;AACrC,OAAO,IAAI,mBAAmB,2BAAW,sBAAAA,SAAW,GAAG,aAAa;AACpE,OAAO,OAAO,mBAAmB,uBAAW,aAAa;",
  "names": ["Router", "bodyParser"]
}
